when:
  - event: pull_request
  - event: push
    branch: main

variables:
  - &base_image "docker.io/sebastinez/radicle-desktop-base:latest_3"
  - &cache_endpoint "https://minio-api.radworks.garden/build-caches/radicle-desktop/cache"
  - &cache_dir "radicle-desktop/cache"

steps:
  cache:
    image: *base_image
    pull: true
    environment:
      CACHE_ENDPOINT: *cache_endpoint
      CACHE_DIR: *cache_dir
    entrypoint:
      - "/bin/bash"
      - "-c"
      - |
        set -euo pipefail

        # Initialize cache status file
        echo "# Cache status" > .cache

        export ARCH=$(uname -m)
        export RUST_VERSION=$(rustc --version | cut -d ' ' -f 2)
        export RUST_HASH=$(sha256sum Cargo.lock | cut -d ' ' -f 1)
        export FILE_NAME="rust-""$ARCH""-""$RUST_VERSION""-""$RUST_HASH"".tar.zst"
        echo "FILE_NAME=$FILE_NAME" >> .cache
        cat .cache

        # Create temporary directory for cache files
        mkdir -p "$CACHE_DIR"

        echo "Checking cache..."
        url="$CACHE_ENDPOINT""/""$FILE_NAME"
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --head $url)

        if [ "$HTTP_CODE" = "200" ]; then
          echo "Cache hit! Downloading..."
          curl -s -o "$CACHE_DIR""/""$FILE_NAME" $url
          echo "CACHE_HIT=true" >> .cache
        else
          echo "No cache found (HTTP status: $HTTP_CODE)"
          echo "CACHE_HIT=false" >> .cache
        fi

  build:
    image: *base_image
    depends_on: [cache]
    pull: true
    environment:
      CI: true
      CACHE_DIR: *cache_dir
    entrypoint:
      - "/bin/bash"
      - "-c"
      - |
        set -euo pipefail

        export VERSION=$(jq -r '.version' crates/radicle-tauri/tauri.conf.json)
        export ARTIFACT_DIR="radicle-desktop/pre-release/""$VERSION""_""${CI_COMMIT_SHA:0:8}"
        export LATEST_DIR="radicle-desktop/latest"
        mkdir -p "$ARTIFACT_DIR"
        mkdir -p "$LATEST_DIR"
        mkdir -p "$LATEST_DIR""/deb"
        mkdir -p "$LATEST_DIR""/appimage"
        echo $ARTIFACT_DIR
        echo $LATEST_DIR
        echo $CACHE_DIR

        cat .cache
        source .cache

        if [ "$CACHE_HIT" = "true" ]; then
          echo "Extracting cache..."
          tar --zstd -xf $CACHE_DIR/$FILE_NAME
        fi

        npm ci
        npm run tauri build

        if [ "$CACHE_HIT" = "false" ]; then
          echo "Creating cache archive..."
          tar --zstd -cf $CACHE_DIR/$FILE_NAME target
        fi

        # Organize build artifacts for upload
        cp target/release/bundle/deb/*.deb "$ARTIFACT_DIR"
        cp target/release/bundle/appimage/*.AppImage "$ARTIFACT_DIR"

        # Update latest build artifacts for upload
        cp target/release/bundle/deb/*.deb "$LATEST_DIR/deb"
        cp target/release/bundle/appimage/*.AppImage "$LATEST_DIR/appimage"
        echo "{\"sha\": \"$(git rev-parse HEAD)\"}" > "$LATEST_DIR/sha.json"

  upload-cache:
    image: woodpeckerci/plugin-s3
    depends_on: [build]
    settings:
      endpoint: https://minio-api.radworks.garden
      bucket: build-caches
      source: radicle-desktop/*/*.{tar.zst}
      target: ""
      path_style: true
      access_key:
        from_secret: minio_access_key
      secret_key:
        from_secret: minio_secret_key

  upload-artifacts:
    image: woodpeckerci/plugin-s3
    depends_on: [build]
    settings:
      endpoint: https://minio-api.radworks.garden
      bucket: radworks-releases
      source: radicle-desktop/pre-release/*/*.{deb,AppImage}
      target: ""
      path_style: true
      access_key:
        from_secret: minio_access_key
      secret_key:
        from_secret: minio_secret_key

  release:
    image: woodpeckerci/plugin-s3
    depends_on: [build]
    when:
      - evaluate: 'CI_PIPELINE_EVENT == "push" && CI_COMMIT_BRANCH == CI_REPO_DEFAULT_BRANCH && CI_COMMIT_MESSAGE == "^Release"'
    settings:
      endpoint: https://minio-api.radworks.garden
      bucket: radworks-releases
      source: radicle-desktop/latest/*/*.{deb,AppImage}
      target: ""
      overwrite: true
      path_style: true
      access_key:
        from_secret: minio_access_key
      secret_key:
        from_secret: minio_secret_key
